plugins {
  id 'scala'
  id 'org.scoverage' version '2.1.0'
  id 'com.github.maiflai.scalatest' version '0.14'
  id 'maven'
  id 'signing'
}
group 'com.github.sorokinigor'

repositories {
  jcenter()
}

def scalaVersion = System.getProperty('scala.version', '2.12.1')
def scalaMajorVersion = toMajorVersion(scalaVersion)

ext.versions = [
    scala    : [major: scalaMajorVersion, current: scalaVersion],
    hazelcast: System.getProperty('hazelcast.version', '3.8.3'),
    akka     : System.getProperty('akka.version', '2.5.3'),
    scalaTest: '3.0.1',
    slf4j    : '1.7.22',
    logback  : '1.1.7',
    scoverage: '1.3.0'
]

dependencies {
  /**
   *  Compile only dependencies. Make sure you include the relevant dependencies in your project.
   */
  compileOnly "org.scala-lang:scala-library:${versions.scala.current}"

  /* Hazelcast */
  compileOnly "com.hazelcast:hazelcast:${versions.hazelcast}"
  compileOnly "com.hazelcast:hazelcast-client:${versions.hazelcast}"

  /* Akka */
  compileOnly "com.typesafe.akka:akka-actor_${versions.scala.major}:${versions.akka}"
  compileOnly "com.typesafe.akka:akka-persistence_${versions.scala.major}:${versions.akka}"

  /**
   *  Tests dependencies.
   */
  testCompile "org.scala-lang:scala-library:${versions.scala.current}"

  /* Hazelcast */
  testCompile "com.hazelcast:hazelcast:${versions.hazelcast}"
  testCompile "com.hazelcast:hazelcast-client:${versions.hazelcast}"

  /* Akka */
  testCompile "com.typesafe.akka:akka-actor_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-persistence_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-slf4j_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-testkit_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-persistence-tck_${versions.scala.major}:${versions.akka}"

  /* Test libraries */
  testCompile "org.scalatest:scalatest_${versions.scala.major}:${versions.scalaTest}"
  testRuntime 'org.pegdown:pegdown:1.6.0'

  /* Logging */
  testCompile "org.slf4j:slf4j-api:${versions.slf4j}"
  testRuntime "ch.qos.logback:logback-classic:${versions.logback}"

  scoverage "org.scoverage:scalac-scoverage-plugin_${versions.scala.major}:${versions.scoverage}"
  scoverage "org.scoverage:scalac-scoverage-runtime_${versions.scala.major}:${versions.scoverage}"
}

checkScoverage {
  minimumRate = 0.8
}

archivesBaseName = "${project.name}_${versions.scala.major}"

jar {
  manifest {
    attributes 'Implementation-Title': archivesBaseName,
               'Implementation-Version': version
  }
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Akka Persistence Hazelcast'
        packaging 'jar'
        description 'An extension to Akka Persistence, which stores journals and snapshots in Hazelcast.'
        url 'https://github.com/sorokinigor/akka-persistence-hazelcast'

        scm {
          connection 'scm:git:git://github.com/sorokinigor/akka-persistence-hazelcast.git'
          developerConnection 'scm:git:ssh://github.com:sorokinigor/akka-persistence-hazelcast.git'
          url 'https://github.com/sorokinigor/akka-persistence-hazelcast/tree/master'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }

        developers {
          developer {
            id 'sorokinigor'
            name 'Igor Sorokin'
            email 'igorsorokin808@gmail.com'
            organizationUrl 'https://github.com/sorokinigor/'
          }
        }
      }
    }
  }
}

def toMajorVersion(String scalaVersion) {
  def pattern = java.util.regex.Pattern.compile('(\\d+\\.\\d+)\\.\\d+.*')
  def matcher = pattern.matcher(scalaVersion)
  if (matcher.matches()) {
    return matcher.group(1)
  } else {
    throw new IllegalArgumentException("Unable to parse scala major version '$scalaVersion'.")
  }
}
