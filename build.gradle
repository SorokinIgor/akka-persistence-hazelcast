plugins {
  id 'scala'
  id "org.scoverage" version "2.1.0"
  id "com.github.maiflai.scalatest" version "0.14"
}

group 'com.github.sorokinigor'
version '1.0.0-SNAPSHOT'

repositories {
  jcenter()
}
def scalaVersion = System.getProperty('scala.version', '2.12.1')
def scalaMajorVersion = toMajorVersion(scalaVersion)

ext.versions = [
    scala    : [major: scalaMajorVersion, current: scalaVersion],
    hazelcast: System.getProperty('hazelcast.version', '3.7.4'),
    akka     : System.getProperty('akka.version', '2.4.16'),
    scalaTest: '3.0.1',
    slf4j    : '1.7.22',
    logback  : '1.1.7',
    scoverage: '1.3.0'
]

dependencies {
  /**
   *  Compile only dependencies. Make sure you include the relevant dependencies in your project.
   */
  compileOnly "org.scala-lang:scala-library:${versions.scala.current}"

  /* Hazelcast */
  compileOnly "com.hazelcast:hazelcast:${versions.hazelcast}"
  compileOnly "com.hazelcast:hazelcast-client:${versions.hazelcast}"

  /* Akka */
  compileOnly "com.typesafe.akka:akka-actor_${versions.scala.major}:${versions.akka}"
  compileOnly "com.typesafe.akka:akka-persistence_${versions.scala.major}:${versions.akka}"

  /**
   *  Tests dependencies.
   */
  testCompile "org.scala-lang:scala-library:${versions.scala.current}"

  /* Hazelcast */
  testCompile "com.hazelcast:hazelcast:${versions.hazelcast}"
  testCompile "com.hazelcast:hazelcast-client:${versions.hazelcast}"

  /* Akka */
  testCompile "com.typesafe.akka:akka-actor_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-persistence_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-slf4j_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-testkit_${versions.scala.major}:${versions.akka}"
  testCompile "com.typesafe.akka:akka-persistence-tck_${versions.scala.major}:${versions.akka}"

  /* Test libraries */
  testCompile "org.scalatest:scalatest_${versions.scala.major}:${versions.scalaTest}"
  testRuntime 'org.pegdown:pegdown:1.6.0'

  /* Logging */
  testCompile "org.slf4j:slf4j-api:${versions.slf4j}"
  testRuntime "ch.qos.logback:logback-classic:${versions.logback}"

  scoverage "org.scoverage:scalac-scoverage-plugin_${versions.scala.major}:${versions.scoverage}"
  scoverage "org.scoverage:scalac-scoverage-runtime_${versions.scala.major}:${versions.scoverage}"
}

def artifactName = "${project.name}_${versions.scala.major}"

jar {
  baseName = artifactName
  manifest {
    attributes "Implementation-Title": artifactName,
               "Implementation-Version": version
  }
}

task sourceJar(type: Jar) {
  baseName = artifactName
  classifier "sources"
  from sourceSets.main.allSource
}

artifacts {
  archives sourceJar
}

checkScoverage {
  minimumRate = 0.8
}

def toMajorVersion(String scalaVersion) {
  def pattern = java.util.regex.Pattern.compile('(\\d+\\.\\d+)\\.\\d+.*')
  def matcher = pattern.matcher(scalaVersion)
  if (matcher.matches()) {
    return matcher.group(1)
  } else {
    throw new IllegalArgumentException("Unable to parse scala major version '$scalaVersion'.")
  }
}
